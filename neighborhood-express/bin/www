#!/usr/bin/env node

/**
 * Module dependencies.
 */
import { app, ioServer } from "../app.js";
import debug from "debug";
import http from "http";
import { setClientsReference } from "../routes/game.js";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3002");
app.set("port", port);

/**
 * NOTE: HTTP server and Socket.IO are now configured in app.js
 * This file now only serves as a compatibility layer
 */

// Socket.IO is now exported from app.js, no need to create a new one
const io = ioServer;

// Store connected clients
const clients = new Map();

// Share clients reference with game routes
setClientsReference(clients);

// Export io for potential external use
export { io };

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = io.httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`Socket.IO server running on port ${addr.port}`);
}

// Register the listening handler on the existing server
io.httpServer.on("listening", onListening);
io.httpServer.on("error", onError);
